name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Step 1: Quick checks (fail fast)
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check formatting
        run: npm run format -- --check

  # Step 2: Type checking (can run in parallel)
  type-check:
    name: TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run type-check

  # Step 3: Unit tests (no build needed)
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test

  # Step 4: Build the application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, test-unit]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Step 5: E2E tests (need build artifacts)
  test-e2e:
    name: E2E Tests (chromium)
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Run E2E tests
        run: npm run test:e2e -- --project=chromium
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-chromium
          path: playwright-report/
          retention-days: 30

  # Step 6: Deploy after all tests pass
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test-e2e]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Deploy to Cloudflare
        id: deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Deploying to production..."
            npx wrangler deploy --minify
            echo "deployment_url=https://web-app-starter-pack.workers.dev" >> $GITHUB_OUTPUT
          else
            echo "Creating preview deployment..."
            OUTPUT=$(npx wrangler versions upload 2>&1)
            echo "$OUTPUT"
            # Extract the preview URL from the output
            PREVIEW_URL=$(echo "$OUTPUT" | grep -o 'https://[a-f0-9\-]*\..*\.workers\.dev' | head -1)
            echo "deployment_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub deployment
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: [],
              production_environment: true
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://web-app-starter-pack.workers.dev'
            });
      
      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request' && steps.deploy.outputs.deployment_url
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const previewUrl = '${{ steps.deploy.outputs.deployment_url }}';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `### Preview Deployment Ready\n\nYour changes have been deployed to: ${previewUrl}`
              });
            } catch (error) {
              console.log('Could not comment on PR (expected for Dependabot PRs):', error.message);
            }